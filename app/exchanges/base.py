from typing import Dict, Any
from abc import ABC, abstractmethod

class Exchange(ABC):
    mode: str = "paper"

    @abstractmethod
    async def fetch_ticker(self, symbol: str) -> Dict[str, Any]: ...
    @abstractmethod
    async def fetch_order_book(self, symbol: str) -> Dict[str, Any]: ...
    @abstractmethod
    async def create_order(self, symbol: str, side: str, qty: float, price: float | None = None, client_id: str | None = None) -> Dict[str, Any]: ...
    @abstractmethod
    async def fetch_open_orders(self, symbol: str) -> list[Dict[str, Any]]: ...
    @abstractmethod
    async def cancel_order(self, order_id: str, symbol: str) -> Dict[str, Any]: ...
    @abstractmethod
    async def fetch_balance(self) -> Dict[str, Any]: ...
